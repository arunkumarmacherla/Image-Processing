import cv2
import numpy as np
import matplotlib.pyplot as plt

# Create a simple synthetic image (a white square on a black background)
image = np.zeros((256, 256), dtype=np. uint8) # Create black image (background)
cv2.rectangle (image, (50, 50), (200, 200), 255, -1) # Draw a white square

def apply_gradient (image):
    # Applying Sobel filter in both horizontal and vertical directions
    sobel_x = cv2.Sobel (image, cv2.CV_64F, 1, 0, ksize=3) # Gradient in X direction
    sobel_y = cv2.Sobel (image, cv2.CV_64F, 0, 1, ksize=3) # Gradient in Y direction

    # Magnitude of the gradient
    gradient_magnitude = cv2.magnitude (sobel_x, sobel_y)

    # Normalize and convert to 8-bit image
    gradient_magnitude = np. uint8 (np.absolute (gradient_magnitude))

    
    return gradient_magnitude

def apply_laplacian (image):
    # Apply Laplacian operator
    laplacian = cv2.Laplacian (image, cv2.CV_64F)

    # Normalize and convert to 8-bit image
    laplacian = np. uint8 (np.absolute (laplacian))

    return laplacian

# Apply Gradient and Laplacian
gradient_image = apply_gradient (image)
laplacian_image = apply_laplacian (image)

# Display the original image and the results
plt.figure(figsize=(12, 6))

plt.subplot(1, 3, 1), plt.imshow(image, cmap='gray'), plt.title('Original Image')
plt.subplot(1, 3, 2), plt.imshow(gradient_image, cmap='gray'), plt.title('Gradient Image')
plt.subplot(1, 3, 3), plt.imshow(laplacian_image, cmap='gray'), plt.title('Laplacian Image')

plt.show()
